<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFPersisitenceFramework</name>
    </assembly>
    <members>
        <member name="T:CSP.EFPF.Contracts.IRepositoryProvider">
            <summary>
            Interface for a class that can provide repositories by type.
            The class may create the repositories dynamically if it is unable
            to find one in its cache of repositories.
            </summary>
            <remarks>
            Repositories created by this provider tend to require a <see cref="P:CSP.EFPF.Contracts.IRepositoryProvider.DbContext"/>
            to retrieve data.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.Contracts.IRepositoryProvider.GetRepositoryForEntityType``1">
            <summary>
            Get an <see cref="T:CSP.EFPF.Interfaces.IRepository`1"/> for entity type, T.
            </summary>
            <typeparam name="T">
            Root entity type of the <see cref="T:CSP.EFPF.Interfaces.IRepository`1"/>.
            </typeparam>
        </member>
        <member name="M:CSP.EFPF.Contracts.IRepositoryProvider.GetRepository``1(System.Func{System.Data.Entity.DbContext,System.Object})">
            <summary>
            Get a repository of type T.
            </summary>
            <typeparam name="T">
            Type of the repository, typically a custom repository interface.
            </typeparam>
            <param name="factory">
            An optional repository creation function that takes a <see cref="P:CSP.EFPF.Contracts.IRepositoryProvider.DbContext"/>
            and returns a repository of T. Used if the repository must be created.
            </param>
            <remarks>
            Looks for the requested repository in its cache, returning if found.
            If not found, tries to make one with the factory, fallingback to 
            a default factory if the factory parameter is null.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.Contracts.IRepositoryProvider.SetRepository``1(``0)">
            <summary>
            Set the repository to return from this provider.
            </summary>
            <remarks>
            Set a repository if you don't want this provider to create one.
            Useful in testing and when developing without a backend
            implementation of the object returned by a repository of type T.
            </remarks>
        </member>
        <member name="P:CSP.EFPF.Contracts.IRepositoryProvider.DbContext">
            <summary>
            Get and set the <see cref="P:CSP.EFPF.Contracts.IRepositoryProvider.DbContext"/> with which to initialize a repository
            if one must be created.
            </summary>
        </member>
        <member name="T:CSP.EFPF.RepositoryFactories">
            <summary>
            A maker of Repositories.
            </summary>
            <remarks>
            An instance of this class contains repository factory functions for different types.
            Each factory function takes an EF <see cref="T:System.Data.Entity.DbContext"/> and returns
            a repository bound to that DbContext.
            <para>
            Designed to be a "Singleton", configured at web application start with
            all of the factory functions needed to create any type of repository.
            Should be thread-safe to use because it is configured at app start,
            before any request for a factory, and should be immutable thereafter.
            </para>
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryFactories.#ctor">
            <summary>
            Constructor that initializes with runtime Code Camper repository factories
            </summary>
        </member>
        <member name="M:CSP.EFPF.RepositoryFactories.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Func{System.Data.Entity.DbContext,System.Object}})">
            <summary>
            Constructor that initializes with an arbitrary collection of factories
            </summary>
            <param name="factories">
            The repository factory functions for this instance. 
            </param>
            <remarks>
            This ctor is primarily useful for testing this class
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryFactories.GetRepositoryFactory``1">
            <summary>
            Get the repository factory function for the type.
            </summary>
            <typeparam name="T">Type serving as the repository factory lookup key.</typeparam>
            <returns>The repository function if found, else null.</returns>
            <remarks>
            The type parameter, T, is typically the repository type 
            but could be any type (e.g., an entity type)
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryFactories.GetRepositoryFactoryForEntityType``1">
            <summary>
            Get the factory for <see cref="!:IRepository&lt;T&gt;"/> where T is an entity type.
            </summary>
            <typeparam name="T">The root type of the repository, typically an entity type.</typeparam>
            <returns>
            A factory that creates the <see cref="!:IRepository&lt;T&gt;"/>, given an EF <see cref="T:System.Data.Entity.DbContext"/>.
            </returns>
            <remarks>
            Looks first for a custom factory in <see cref="F:CSP.EFPF.RepositoryFactories._repositoryFactories"/>.
            If not, falls back to the <see cref="M:CSP.EFPF.RepositoryFactories.DefaultEntityRepositoryFactory``1"/>.
            You can substitute an alternative factory for the default one by adding
            a repository factory for type "T" to <see cref="F:CSP.EFPF.RepositoryFactories._repositoryFactories"/>.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryFactories.DefaultEntityRepositoryFactory``1">
            <summary>
            Default factory for a <see cref="!:IRepository&lt;T&gt;"/> where T is an entity.
            </summary>
            <typeparam name="T">Type of the repository's root entity</typeparam>
        </member>
        <member name="F:CSP.EFPF.RepositoryFactories._repositoryFactories">
            <summary>
            Get the dictionary of repository factory functions.
            </summary>
            <remarks>
            A dictionary key is a System.Type, typically a repository type.
            A value is a repository factory function
            that takes a <see cref="T:System.Data.Entity.DbContext"/> argument and returns
            a repository object. Caller must know how to cast it.
            </remarks>
        </member>
        <member name="T:CSP.EFPF.RepositoryProvider">
            <summary>
            Provides an <see cref="T:CSP.EFPF.Interfaces.IRepository`1"/> for a client request.
            </summary>
            <remarks>
            Caches repositories of a given type so that repositories are only created once per provider.
            Code Camper creates a new provider per client request.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryProvider.GetRepositoryForEntityType``1">
            <summary>
            Get or create-and-cache the default <see cref="T:CSP.EFPF.Interfaces.IRepository`1"/> for an entity of type T.
            </summary>
            <typeparam name="T">
            Root entity type of the <see cref="T:CSP.EFPF.Interfaces.IRepository`1"/>.
            </typeparam>
            <remarks>
            If can't find repository in cache, use a factory to create one.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryProvider.GetRepository``1(System.Func{System.Data.Entity.DbContext,System.Object})">
            <summary>
            Get or create-and-cache a repository of type T.
            </summary>
            <typeparam name="T">
            Type of the repository, typically a custom repository interface.
            </typeparam>
            <param name="factory">
            An optional repository creation function that takes a DbContext argument
            and returns a repository of T. Used if the repository must be created and
            caller wants to specify the specific factory to use rather than one
            of the injected <see cref="T:CSP.EFPF.RepositoryFactories"/>.
            </param>
            <remarks>
            Looks for the requested repository in its cache, returning if found.
            If not found, tries to make one using <see cref="M:CSP.EFPF.RepositoryProvider.MakeRepository``1(System.Func{System.Data.Entity.DbContext,System.Object},System.Data.Entity.DbContext)"/>.
            </remarks>
        </member>
        <member name="M:CSP.EFPF.RepositoryProvider.MakeRepository``1(System.Func{System.Data.Entity.DbContext,System.Object},System.Data.Entity.DbContext)">
            <summary>Make a repository of type T.</summary>
            <typeparam name="T">Type of repository to make.</typeparam>
            <param name="dbContext">
            The <see cref="P:CSP.EFPF.RepositoryProvider.DbContext"/> with which to initialize the repository.
            </param>        
            <param name="factory">
            Factory with <see cref="P:CSP.EFPF.RepositoryProvider.DbContext"/> argument. Used to make the repository.
            If null, gets factory from <see cref="F:CSP.EFPF.RepositoryProvider._repositoryFactories"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:CSP.EFPF.RepositoryProvider.SetRepository``1(``0)">
            <summary>
            Set the repository for type T that this provider should return.
            </summary>
            <remarks>
            Plug in a custom repository if you don't want this provider to create one.
            Useful in testing and when developing without a backend
            implementation of the object returned by a repository of type T.
            </remarks>
        </member>
        <member name="F:CSP.EFPF.RepositoryProvider._repositoryFactories">
            <summary>
            The <see cref="T:CSP.EFPF.RepositoryFactories"/> with which to create a new repository.
            </summary>
            <remarks>
            Should be initialized by constructor injection
            </remarks>
        </member>
        <member name="P:CSP.EFPF.RepositoryProvider.DbContext">
            <summary>
            Get and set the <see cref="P:CSP.EFPF.RepositoryProvider.DbContext"/> with which to initialize a repository
            if one must be created.
            </summary>
        </member>
        <member name="P:CSP.EFPF.RepositoryProvider.Repositories">
            <summary>
            Get the dictionary of repository objects, keyed by repository type.
            </summary>
            <remarks>
            Caller must know how to cast the repository object to a useful type.
            <p>This is an extension point. You can register fully made repositories here
            and they will be used instead of the ones this provider would otherwise create.</p>
            </remarks>
        </member>
        <member name="T:CSP.EFPF.TransactionScopeUnitOfWork`1">
            <summary>
            Unit of work with transactional features.
            </summary>
            <typeparam name="TContext">Type of the specific DbContext.</typeparam>
        </member>
        <member name="M:CSP.EFPF.TransactionScopeUnitOfWork`1.ConfigContext">
            <summary>
            Method to configure the data context.
            </summary>
        </member>
    </members>
</doc>
